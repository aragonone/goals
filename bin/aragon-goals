#!/usr/bin/env node

const util = require('util')
const fs = require('fs')
const path = require('path')
const readFile = util.promisify(fs.readFile)
const chalk = require('chalk')
const Table = require('cli-table')

const FOUNDERS = process.env.FOUNDERS

const {
  isJsonRatings,
  isJsonGoals,
  isMainGoal,
  goalsFromJsonGoals,
  getNames,
  getGoal,
  getRatingsRequired,
  getDirectGoals,
} = require('../node-lib/goals')

const loadJson = async filename => {
  try {
    const content = await readFile(filename, 'utf8')
    return JSON.parse(content)
  } catch (err) {
    return null
  }
}

const getGoalsAndRatings = async filenames =>
  Promise.all(
    filenames.map(filename =>
      loadJson(filename).then(data => {
        let type = 'invalid'
        if (isJsonRatings(data)) type = 'ratings'
        if (isJsonGoals(data)) type = 'goals'
        return { filename, data: type === 'invalid' ? null : data, type }
      })
    )
  )

const collectScores = (name, goals, ratings) =>
  ratings.reduce((scores, { name: reviewer, ratings }) => {
    if (reviewer === name) return scores
    return ratings.reduce((scores, [voteId, goalScores]) => {
      const memberScore = goalScores.find(score => score[0] === name)
      if (!memberScore) return scores
      return [
        ...scores,
        [memberScore[1], isMainGoal(getGoal(voteId, goals)) ? 3 : 1],
      ]
    }, scores)
  }, [])

const getResultsByName = (names, goals, ratings, founders) =>
  names.map(name => {
    const scores = collectScores(name, goals, ratings)
    const scoresRequired = getRatingsRequired(name, goals, founders)

    const [total, divider] = scores.reduce(
      ([total, divider], score) => [total + score[0] * score[1], divider + score[1]],
      [0, 0]
    )

    const directGoals = getDirectGoals(goals, name)

    return {
      name,
      scores,
      scoresRequired,
      directGoalsCount: directGoals.length,
      directMainGoalsCount: directGoals.filter(isMainGoal).length,
      isPartial: scores.length < scoresRequired.length,
      finalScore: divider > 0 ? Math.round((total / divider) * 100) / 100 : -1,
    }
  })

const displayScores = resultsByName => {
  const resultsTable = new Table({
    style: { compact: true, head: ['white'] },
    head: ['Name', 'Total goals', 'Final score'],
    colWidths: [
      Math.max(...resultsByName.map(({ name }) => name.length)) + 2,
      13,
      16,
    ],
  })

  resultsByName.forEach(
    ({
      name,
      isPartial,
      finalScore,
      directGoalsCount,
      directMainGoalsCount,
    }) => {
      resultsTable.push([
        name,
        `${String(directGoalsCount).padStart(2, ' ')} ${
          directMainGoalsCount > 0 ? `(${directMainGoalsCount} main)` : ''
        }`,
        finalScore === -1
          ? chalk.red('N/A')
          : String(finalScore).padEnd(4, ' ') +
            (isPartial ? chalk.yellow(' (partial)') : ''),
      ])
    }
  )

  return resultsTable.toString()
}

const main = async () => {
  const filenames = [...process.argv]
    .slice(2)
    .map(name => path.join(process.cwd(), name))

  const founders = FOUNDERS && FOUNDERS.split(',')
  if (!founders) {
    console.log(
      'No founders found. Set them using the FOUNDERS environment variable:'
    )
    console.log('')
    console.log('  FOUNDERS=Tom,Jerry aragon-goals')
    process.exit(1)
  }

  const goalsAndRatings = await getGoalsAndRatings(filenames)
  const jsonGoals = goalsAndRatings.find(data => data.type === 'goals')

  if (!jsonGoals) {
    console.log('No valid goals.json found.')
    process.exit(1)
  }

  // Invalid files
  goalsAndRatings
    .filter(data => data.type === 'invalid')
    .map(data => path.basename(data.filename))
    .forEach(name => {
      console.log('Invalid file:', name)
    })

  const goals = goalsFromJsonGoals(jsonGoals.data)
  const ratings = goalsAndRatings
    .filter(data => data.type === 'ratings')
    .map(ratings => ratings.data)

  const names = getNames(goals, founders)
  const resultsByName = getResultsByName(names, goals, ratings, founders)

  // Calculate total scores required / filled
  const [totalScoresRequired, totalScoresFilled] = resultsByName.reduce(
    (result, { scores, scoresRequired }) => [
      result[0] + scoresRequired.length,
      result[1] + scores.length,
    ],
    [0, 0]
  )

  console.log('')
  console.log(displayScores(resultsByName))

  console.log('')
  console.log(
    ' Number of goals:',
    goals.length,
    `(${goals.filter(isMainGoal).length} main)`
  )

  console.log('')
  console.log(
    ` Scores filled: ${chalk[
      totalScoresFilled === totalScoresRequired ? 'green' : 'yellow'
    ](`${totalScoresFilled} out of ${totalScoresRequired}`)}`
  )
}

main()
